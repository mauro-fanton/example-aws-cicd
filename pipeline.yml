AWSTemplateFormatVersion: '2010-09-09'
Resources:
  CodePipelineServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "example-pipeline-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - codebuild.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: pipeline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DeleteLogGroup"
                Resource:
                  - !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/codebuild/*"
                  - !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/codebuild/*:log-stream:*"
                  - !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*:log-stream:*"
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource:
                  - !Sub "arn:aws:codebuild:*:${AWS::AccountId}:project/UnitTests"
              - Effect: Allow
                Action:
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "iam:CreateRole"
                  - "iam:PutRolePolicy"
                  - "iam:DeleteRolePolicy"
                  - "iam:DeleteRole"
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/innovations-*-${AWS::Region}-lambdaRole"
              - Effect: Allow
                Action:
                  - "iam:GetRole"
                Resource: "*"
              - Effect: Allow
                Action:
                - "lambda:GetFunctionConfiguration"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:CreateRole"
                  - "iam:DeleteRolePolicy"
                  - "iam:DeleteRole"
                  - "iam:PutRolePolicy"
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/innovations-*-IamRoleCustomResources*"
              - Effect: Allow
                Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                  - "cloudformation:Get*"
                  - "cloudformation:PreviewStackUpdate"
                  - "cloudformation:ValidateTemplate"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DeleteLogGroup"
                  - "logs:DeleteLogStream"
                  - "logs:DescribeLog*"
                  - "logs:FilterLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group::log-stream*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:DeleteLogGroup"
                Resource:
                  - !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group*"
              - Effect: Allow
                Action:
                  - "codestar-connections:ListConnections"
                  - "codestar-connections:UseConnection"
                Resource: !Ref GitHubConnection
              - Effect: Allow
                Action: 
                  - "ssm:PutParameter"
                  - "ssm:GetParameter"
                Resource:
                  - !Sub "arn:aws:ssm:*:${AWS::AccountId}:parameter/*"


  GitHubConnection:
    Type: 'AWS::CodeStarConnections::Connection'
    Properties:
      ConnectionName: example-connection
      ProviderType: GitHub  
  DeployBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Suspended
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      Name: !Ref 'AWS::StackName'
      ArtifactStore:
        Type: S3
        Location: !Ref DeployBucket
      RoleArn: !GetAtt
        - CodePipelineServiceRole
        - Arn     
      Stages:
        - Name: Source
          Actions:
            - Name: Get-sources
              ActionTypeId:
                Version: '1'
                Owner: AWS
                Category: Source
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: react-code-artifact
              Configuration:
                ConnectionArn: !Ref GitHubConnection
                FullRepositoryId: !Sub "mauro-fanton/example-aws-cicd"
                BranchName: 'main'
              RunOrder: 1
        - Name: UnitTests
          Actions:
            - Name: UnitTests
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                ProjectName: 'UnitTests'
              InputArtifacts:
                - Name: react-code-artifact

  UnitTests:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: "UnitTests"
      ServiceRole: !GetAtt
        - CodePipelineServiceRole
        - Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: "buildspec.yml"
      TimeoutInMinutes: 10 
